{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "ADF-ETLFW"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Ingestion_L3')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This pipeline will count the total number of objects (tables etc.) required to be copied in this run, come up with the number of sequential batches based on the max allowed concurrent copy task, and then execute another pipeline to copy different batches sequentially.",
				"activities": [
					{
						"name": "GetSumOfObjectsToCopy",
						"description": "Count the total number of objects (tables etc.) required to be copied in this run.",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT count(*) as count FROM @{pipeline().parameters.MainControlTableName} where TopLevelPipelineName='@{pipeline().Pipeline}' and TriggerName like '%@{pipeline().TriggerName}%' and CopyEnabled = 1",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "MetadataDS",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "CopyBatchesOfObjectsSequentially",
						"description": "Come up with the number of sequential batches based on the max allowed concurrent copy tasks, and then execute another pipeline to copy different batches sequentially.",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetSumOfObjectsToCopy",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@range(0, add(div(activity('GetSumOfObjectsToCopy').output.firstRow.count,\n                    pipeline().parameters.MaxNumberOfConcurrentTasks),\n                    if(equals(mod(activity('GetSumOfObjectsToCopy').output.firstRow.count,\n                    pipeline().parameters.MaxNumberOfConcurrentTasks), 0), 0, 1)))",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "CopyObjectsInOneBatch",
									"description": "Execute another pipeline to copy one batch of objects. The objects belonging to this batch will be copied parallelly.",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Ingestion_L2",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"MaxNumberOfObjectsReturnedFromLookupActivity": {
												"value": "@pipeline().parameters.MaxNumberOfObjectsReturnedFromLookupActivity",
												"type": "Expression"
											},
											"TopLevelPipelineName": {
												"value": "@{pipeline().Pipeline}",
												"type": "Expression"
											},
											"TriggerName": {
												"value": "@{pipeline().TriggerName}",
												"type": "Expression"
											},
											"CurrentSequentialNumberOfBatch": {
												"value": "@item()",
												"type": "Expression"
											},
											"SumOfObjectsToCopy": {
												"value": "@activity('GetSumOfObjectsToCopy').output.firstRow.count",
												"type": "Expression"
											},
											"SumOfObjectsToCopyForCurrentBatch": {
												"value": "@min(pipeline().parameters.MaxNumberOfConcurrentTasks, activity('GetSumOfObjectsToCopy').output.firstRow.count)",
												"type": "Expression"
											},
											"MainControlTableName": {
												"value": "@pipeline().parameters.MainControlTableName",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"MaxNumberOfObjectsReturnedFromLookupActivity": {
						"type": "Int",
						"defaultValue": 5000
					},
					"MaxNumberOfConcurrentTasks": {
						"type": "Int",
						"defaultValue": 20
					},
					"MainControlTableName": {
						"type": "String",
						"defaultValue": "Control.Task_VW"
					}
				},
				"folder": {
					"name": "Ingestion"
				},
				"annotations": [
					"MetadataDrivenSolution"
				],
				"lastPublishTime": "2025-06-08T04:19:47Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_main_orchestrator')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "act_get_main_config",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": false,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "dds_etl_fw_metadata",
								"type": "DatasetReference",
								"parameters": {
									"location": {
										"value": "@pipeline().parameters.metadataLocation",
										"type": "Expression"
									},
									"path": {
										"value": "@pipeline().parameters.metadataPath",
										"type": "Expression"
									},
									"configName": {
										"value": "main.json",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "act_execute_stage_inorder",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "act_set_data_links",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('act_get_main_config').output.firstRow.executionOrder",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "act_get_tasks",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "JsonSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": false,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "JsonReadSettings"
											}
										},
										"dataset": {
											"referenceName": "dds_etl_fw_metadata",
											"type": "DatasetReference",
											"parameters": {
												"location": {
													"value": "@pipeline().parameters.metadataLocation",
													"type": "Expression"
												},
												"path": {
													"value": "@concat(pipeline().parameters.metadataPath, '/task')",
													"type": "Expression"
												},
												"configName": {
													"value": "@concat(item().stage, '.json')",
													"type": "Expression"
												}
											}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "act_pipeline_for_stage",
									"type": "Switch",
									"dependsOn": [
										{
											"activity": "act_get_tasks",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"on": {
											"value": "@item().stage",
											"type": "Expression"
										},
										"cases": [
											{
												"value": "ingest",
												"activities": [
													{
														"name": "act_exec_process_ingest_tasks_pl",
														"type": "ExecutePipeline",
														"dependsOn": [],
														"policy": {
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"pipeline": {
																"referenceName": "pl_process_ingest_tasks",
																"type": "PipelineReference"
															},
															"waitOnCompletion": true,
															"parameters": {
																"metadataLocation": {
																	"value": "@pipeline().parameters.metadataLocation",
																	"type": "Expression"
																},
																"metadataPath": {
																	"value": "@pipeline().parameters.metadataPath",
																	"type": "Expression"
																},
																"maxConcurrentTasks": {
																	"value": "@pipeline().parameters.maxConcurrentTasks",
																	"type": "Expression"
																},
																"tasksToProcess": {
																	"value": "@activity('act_get_tasks').output.value",
																	"type": "Expression"
																},
																"datalinks": {
																	"value": "@variables('datalinks')",
																	"type": "Expression"
																}
															}
														}
													}
												]
											}
										],
										"defaultActivities": [
											{
												"name": "act_invalid_stage",
												"type": "Fail",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"message": {
														"value": "@concat('Invalid Stage: ', item().stage)",
														"type": "Expression"
													},
													"errorCode": "400"
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "act_set_data_links",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "act_get_main_config",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "datalinks",
							"value": {
								"value": "@activity('act_get_main_config').output.firstRow.datalinks",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"metadataLocation": {
						"type": "string",
						"defaultValue": "metadata"
					},
					"metadataPath": {
						"type": "string",
						"defaultValue": "config"
					},
					"maxConcurrentTasks": {
						"type": "int",
						"defaultValue": 20
					}
				},
				"variables": {
					"datalinks": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "top"
				},
				"annotations": []
			},
			"dependsOn": []
		}
	]
}