{
	"name": "pl_process_one_ingest_task",
	"properties": {
		"activities": [
			{
				"name": "act_get_object_mapping",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "JsonSource",
						"storeSettings": {
							"type": "AzureBlobFSReadSettings",
							"recursive": true,
							"enablePartitionDiscovery": false
						},
						"formatSettings": {
							"type": "JsonReadSettings"
						}
					},
					"dataset": {
						"referenceName": "dds_etl_fw_metadata",
						"type": "DatasetReference",
						"parameters": {
							"location": {
								"value": "@pipeline().parameters.metadataLocation",
								"type": "Expression"
							},
							"path": {
								"value": "@concat(pipeline().parameters.metadataPath,'/mapping')",
								"type": "Expression"
							},
							"configName": {
								"value": "@concat(pipeline().parameters.taskToProcess.mappingId, '.json')",
								"type": "Expression"
							}
						}
					},
					"firstRowOnly": false
				}
			},
			{
				"name": "act_filter_source_datalink",
				"type": "Filter",
				"dependsOn": [],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@pipeline().parameters.datalinks",
						"type": "Expression"
					},
					"condition": {
						"value": "@equals(item().datalinkId, pipeline().parameters.taskToProcess.sourceDatalinkId)",
						"type": "Expression"
					}
				}
			},
			{
				"name": "act_filter_sink_datalink",
				"type": "Filter",
				"dependsOn": [],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@pipeline().parameters.datalinks",
						"type": "Expression"
					},
					"condition": {
						"value": "@equals(item().datalinkId, pipeline().parameters.taskToProcess.sinkDatalinkId)",
						"type": "Expression"
					}
				}
			},
			{
				"name": "act_ingest_object",
				"type": "Copy",
				"dependsOn": [
					{
						"activity": "act_get_object_mapping",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "act_filter_source_datalink",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "act_filter_sink_datalink",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "act_filter_source_object",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "act_filter_sink_object",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"sink": {
						"type": "AzureSqlSink",
						"writeBehavior": "insert",
						"sqlWriterUseTableLock": false,
						"tableOption": "autoCreate",
						"disableMetricsCollection": false
					},
					"enableStaging": false,
					"translator": {
						"value": "@json(concat('{ \n    \"type\": \"TabularTranslator\", \n    \"mappings\":',\n    string(activity('act_get_object_mapping').output.value),',\n    \"typeConversion\": true,\n    \"typeConversionSettings\": {\n        \"allowDataTruncation\": true,\n        \"treatBooleanAsNumber\": false\n    }\n}'))\n",
						"type": "Expression"
					}
				},
				"inputs": [
					{
						"referenceName": "dds_asql_Source",
						"type": "DatasetReference",
						"parameters": {
							"schemaName": {
								"value": "@activity('act_filter_source_object').output.value[0].schemaName",
								"type": "Expression"
							},
							"objectName": {
								"value": "@activity('act_filter_source_object').output.value[0].objectName",
								"type": "Expression"
							},
							"serverName": {
								"value": "@activity('act_filter_source_datalink').output.value[0].uri",
								"type": "Expression"
							},
							"databaseName": {
								"value": "@activity('act_filter_source_datalink').output.value[0].catalog",
								"type": "Expression"
							},
							"un": {
								"value": "@activity('act_filter_source_datalink').output.value[0].un",
								"type": "Expression"
							},
							"up": {
								"value": "@activity('act_filter_source_datalink').output.value[0].up",
								"type": "Expression"
							}
						}
					}
				],
				"outputs": [
					{
						"referenceName": "dds_asql_Bronze",
						"type": "DatasetReference",
						"parameters": {
							"schemaName": {
								"value": "@activity('act_filter_sink_object').output.value[0].schemaName",
								"type": "Expression"
							},
							"objectName": {
								"value": "@activity('act_filter_sink_object').output.value[0].objectName",
								"type": "Expression"
							},
							"serverName": {
								"value": "@activity('act_filter_sink_datalink').output.value[0].uri",
								"type": "Expression"
							},
							"databaseName": {
								"value": "@activity('act_filter_sink_datalink').output.value[0].catalog",
								"type": "Expression"
							},
							"un": {
								"value": "@activity('act_filter_sink_datalink').output.value[0].un",
								"type": "Expression"
							},
							"up": {
								"value": "@activity('act_filter_sink_datalink').output.value[0].up",
								"type": "Expression"
							}
						}
					}
				]
			},
			{
				"name": "act_filter_source_object",
				"type": "Filter",
				"dependsOn": [],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@pipeline().parameters.objects",
						"type": "Expression"
					},
					"condition": {
						"value": "@equals(item().objectId, pipeline().parameters.taskToProcess.sourceObjectId)",
						"type": "Expression"
					}
				}
			},
			{
				"name": "act_filter_sink_object",
				"type": "Filter",
				"dependsOn": [],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@pipeline().parameters.objects",
						"type": "Expression"
					},
					"condition": {
						"value": "@equals(item().objectId, pipeline().parameters.taskToProcess.sinkObjectId)",
						"type": "Expression"
					}
				}
			}
		],
		"parameters": {
			"metadataLocation": {
				"type": "string",
				"defaultValue": "metadata"
			},
			"metadataPath": {
				"type": "string",
				"defaultValue": "config"
			},
			"maxConcurrentTasks": {
				"type": "string",
				"defaultValue": "20"
			},
			"taskToProcess": {
				"type": "object"
			},
			"datalinks": {
				"type": "array"
			},
			"objects": {
				"type": "array"
			}
		},
		"folder": {
			"name": "level 1"
		},
		"annotations": []
	}
}